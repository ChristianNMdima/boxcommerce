import { Injectable, NgModule, defineInjectable } from '@angular/core';
import { Observable } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
class ConnectionService {
    constructor() {
        this.connectionMonitor = new Observable((observer) => {
            window.addEventListener('offline', (e) => {
                observer.next(false);
            });
            window.addEventListener('online', (e) => {
                observer.next(true);
            });
        });
    }
    /**
     * @return {?}
     */
    monitor() {
        return this.connectionMonitor;
    }
}
ConnectionService.ɵfac = function ConnectionService_Factory(t) { return new (t || ConnectionService)(); };
ConnectionService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ConnectionService, factory: ConnectionService.ɵfac, providedIn: 'root' });
/** @nocollapse */
ConnectionService.ctorParameters = () => [];
/** @nocollapse */ ConnectionService.ngInjectableDef = defineInjectable({ factory: function ConnectionService_Factory() { return new ConnectionService(); }, token: ConnectionService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ConnectionService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ConnectionServiceModule {
}
ConnectionServiceModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ConnectionServiceModule });
ConnectionServiceModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ConnectionServiceModule_Factory(t) { return new (t || ConnectionServiceModule)(); }, providers: [ConnectionService], imports: [[]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ConnectionServiceModule, [{
        type: NgModule,
        args: [{
                imports: [],
                providers: [ConnectionService]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { ConnectionService, ConnectionServiceModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY29ubmVjdGlvbi1zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZy1jb25uZWN0aW9uLXNlcnZpY2UvbGliL2Nvbm5lY3Rpb24tc2VydmljZS5zZXJ2aWNlLnRzIiwibmctY29ubmVjdGlvbi1zZXJ2aWNlL2xpYi9jb25uZWN0aW9uLXNlcnZpY2UubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSw4QkFTRTthQUNFLElBQUksQ0FBQyxsQkFWVDtTQVUwQixHQUFHLElBQUksaEJBVlAsSUFTeEI7TUFDeUMsQ0FBQyxDQUFDLFFBQVEsbUJBQy9DLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQywzREFEOUIsUUFBSSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxRQUFRO0lBQ2QsRUFBRSxDQUFDLENBQUMsdUJBQ25DLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMscERBRDdCLFlBQU0sTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7VUFFcEMsQ0FBQyxDQUFDLGFBQ0gsTUFBTSxDQUFDLGhDQUZiLGdCQUFRLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7VUFFQSxDQUFDLFhBRDlCLGFBQU8sQ0FBQyxDQUFDO0dBQzZCLEVBQUUsQ0FBQyxDQUFDLHVCQUNsQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGxEQUQ1QixZQUFNLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBRW5DLENBQUMsQ0FBQyxVQUNKLENBQUMsQ0FBQyxNQUNKLDdCQUhILGdCQUFRLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDNUIsYUFBTyxDQUFDLENBQUM7QUFDVCxTQUFLLENBQUMsQ0FBQztJQUdMLEpBRkYsS0FBRztLQUVNLExBRFQ7VUFFSSxPQUFPLGpCQURKO0VBQ1EsQ0FBQyxIQURVO1lBQ08sQ0FBQyxiQURBLElBQWhDLE9BQU87R0FFTixIQUZXLFFBQ1YsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7QUFDbEMsS0FBRztBQUNIO0lBcEJDLFVBQVUsU0FBQyxrQkFDVixVQUFVLEVBQUUsTUFBTSxjQUNuQiw1QkFGQSxVQUFVLFNBQUMsa0JBQ1YsVUFBVSxFQUFFLE1BQU07T0FDbkI7QUFDTTtBQUFtQjtBQUNZOzs7T0NQdEM7Ozt5QkFHQyxRQUFRLFNBQUMsTURXWTtBQUFDO0FBQUM7TUNWdEIsT0FBTyxFQUFFLEVBQ1IsakJEU3lCO0NDUjFCLFNBQVMsRUFBQyxDQUFDLGlCQUFpQixDQUFDLGNBQzlCLDdDRFFZO0FBS2M7QUNwQjNCO0FBQWdDO21EQUcvQixRQUFRLFNBQUMsa0JBQ1I7RUFBTyxFQUFFLEVBQ1Isa0JBQ0QsU0FBUyxFQUFDLENBQUMsaUJBQWlCLENBQUMsY0FDOUI7Ozs7Ozs7MEJBQ0s7QUFBQztBQUFDO0FBQUk7QUFDUDtBQUFrRTtBQUFJO0FBQUM7QUFBSTtBQUFrQztBQUFrRTtBQUFJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENvbm5lY3Rpb25TZXJ2aWNlIHtcbiAgcHJpdmF0ZSBjb25uZWN0aW9uTW9uaXRvcjogT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY29ubmVjdGlvbk1vbml0b3IgPSBuZXcgT2JzZXJ2YWJsZSgob2JzZXJ2ZXIpID0+IHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvZmZsaW5lJywgKGUpID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dChmYWxzZSk7XG4gICAgICB9KTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmxpbmUnLCAoZSkgPT4ge1xuICAgICAgICBvYnNlcnZlci5uZXh0KHRydWUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBtb25pdG9yKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb25Nb25pdG9yO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb25uZWN0aW9uU2VydmljZSB9IGZyb20gJy4vY29ubmVjdGlvbi1zZXJ2aWNlLnNlcnZpY2UnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBpbXBvcnRzOiBbXHJcbiAgXSxcclxuICBwcm92aWRlcnM6W0Nvbm5lY3Rpb25TZXJ2aWNlXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ29ubmVjdGlvblNlcnZpY2VNb2R1bGUgeyB9XHJcbiJdfQ==